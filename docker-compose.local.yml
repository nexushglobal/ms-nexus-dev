services:
  # NATS Message Broker
  nats:
    image: nats:2.10-alpine
    container_name: nexus-nats
    ports:
      - "${NATS_EXTERNAL_PORT:-4222}:4222"
      - "${NATS_CLUSTER_EXTERNAL_PORT:-6222}:6222"
      - "${NATS_HTTP_EXTERNAL_PORT:-8222}:8222"
    command:
      ["--js", "--sd", "/data", "--http_port", "8222", "--name", "nexus-nats"]
    volumes:
      - nats_data:/data
    networks:
      - nexus-network

  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: nexus-mongodb
    restart: always
    ports:
      - "${MONGODB_EXTERNAL_PORT:-27017}:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE}
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
    networks:
      - nexus-network
    command: mongod --auth

  # API Gateway
  nexus-gateway:
    build:
      context: ./ms-nexus-gateway
      dockerfile: Dockerfile.dev
      target: development
    container_name: nexus-gateway
    ports:
      - "${GATEWAY_PORT:-8000}:8000"
    environment:
      - NODE_ENV=${NODE_ENV}
      - NATS_SERVERS=${NATS_SERVERS}
      - PORT=${GATEWAY_PORT:-8000}
    volumes:
      # Montar código fuente para hot reload
      - ./ms-nexus-gateway/src:/app/src:cached
      - ./ms-nexus-gateway/package.json:/app/package.json:cached
      - ./ms-nexus-gateway/tsconfig.json:/app/tsconfig.json:cached
      - ./ms-nexus-gateway/nest-cli.json:/app/nest-cli.json:cached
      # Excluir node_modules
      - /app/node_modules
    depends_on:
      - nats
      - ms-users
    networks:
      - nexus-network
    command: ["pnpm", "run", "start:dev"]
    restart: unless-stopped

  # Microservicio de Usuarios
  ms-users:
    build:
      context: ./ms-nexus-user
      dockerfile: Dockerfile.dev
      target: development
    environment:
      - NODE_ENV=${NODE_ENV}
      - NATS_SERVERS=${NATS_SERVERS}
      - PORT=${MS_USERS_PORT}
      - MONGODB_URI=${MONGODB_URI}
    volumes:
      # Montar código fuente para hot reload
      - ./ms-nexus-user/src:/app/src:cached
      - ./ms-nexus-user/package.json:/app/package.json:cached
      - ./ms-nexus-user/tsconfig.json:/app/tsconfig.json:cached
      - ./ms-nexus-user/nest-cli.json:/app/nest-cli.json:cached
      # Excluir node_modules para evitar conflictos
      - /app/node_modules
    depends_on:
      - nats
      - mongodb
    networks:
      - nexus-network
    command: ["pnpm", "run", "start:dev"]
    restart: unless-stopped

  # Microservicio de Integración
  ms-integration:
    build:
      context: ./ms-nexus-integration
      dockerfile: Dockerfile.dev
      target: development
    environment:
      - NODE_ENV=${NODE_ENV}
      - PORT=${MS_INTEGRATION_PORT}
      - NATS_SERVERS=${NATS_SERVERS}
      # AWS Configuration
      - AWS_REGION=${AWS_REGION}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_S3_BUCKET_NAME=${AWS_S3_BUCKET_NAME}
      # Email Configuration
      - AWS_SES_SMTP_USERNAME=${AWS_SES_SMTP_USERNAME}
      - AWS_SES_SMTP_PASSWORD=${AWS_SES_SMTP_PASSWORD}
      - EMAIL_FROM=${EMAIL_FROM}
      # API Tokens
      - PA_TOKEN_PERUAPIS=${PA_TOKEN_PERUAPIS}
    volumes:
      # Montar código fuente para hot reload
      - ./ms-nexus-integration/src:/app/src:cached
      - ./ms-nexus-integration/package.json:/app/package.json:cached
      - ./ms-nexus-integration/tsconfig.json:/app/tsconfig.json:cached
      - ./ms-nexus-integration/nest-cli.json:/app/nest-cli.json:cached
      # Excluir node_modules para evitar conflictos
      - /app/node_modules
    depends_on:
      - nats
    networks:
      - nexus-network
    command: ["pnpm", "run", "start:dev"]
    restart: unless-stopped

  ms-unilevel:
    build:
      context: ./ms-nexus-unilevel
      dockerfile: Dockerfile.dev
      target: development
    environment:
      - NODE_ENV=${NODE_ENV}
      - PORT=${MS_UNILEVEL_PORT}
      - NATS_SERVERS=${NATS_SERVERS}
      # PostgreSQL Configuration (External Server)
      - UNILEVEL_DATABASE_URL=${UNILEVEL_DATABASE_URL}
    volumes:
      # Montar código fuente para hot reload
      - ./ms-nexus-unilevel/src:/app/src:cached
      - ./ms-nexus-unilevel/package.json:/app/package.json:cached
      - ./ms-nexus-unilevel/tsconfig.json:/app/tsconfig.json:cached
      - ./ms-nexus-unilevel/nest-cli.json:/app/nest-cli.json:cached
      # Excluir node_modules para evitar conflictos
      - /app/node_modules
    depends_on:
      - nats
    networks:
      - nexus-network
    command: ["pnpm", "run", "start:dev"]
    restart: unless-stopped
  # Microservicio de Auth
  ms-auth:
    build:
      context: ./ms-nexus-auth
      dockerfile: Dockerfile.dev
      target: development
    environment:
      - NODE_ENV=${NODE_ENV}
      - PORT=${MS_AUTH_PORT}
      - NATS_SERVERS=${NATS_SERVERS}
      # JWT Configuration
      - JWT_SECRET=${JWT_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - FRONTEND_URL=${FRONTEND_URL}
    volumes:
      # Montar código fuente para hot reload
      - ./ms-nexus-auth/src:/app/src:cached
      - ./ms-nexus-auth/package.json:/app/package.json:cached
      - ./ms-nexus-auth/tsconfig.json:/app/tsconfig.json:cached
      - ./ms-nexus-auth/nest-cli.json:/app/nest-cli.json:cached
      # Excluir node_modules para evitar conflictos
      - /app/node_modules
    depends_on:
      - nats
    networks:
      - nexus-network
    command: ["pnpm", "run", "start:dev"]
    restart: unless-stopped

  # PostgreSQL - Payments Database
  pg-payments:
    image: postgres:17
    container_name: nexus-payments-db
    restart: always
    ports:
      - "${POSTGRES_PAYMENTS_EXTERNAL_PORT:-5432}:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_PAYMENTS_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PAYMENTS_PASSWORD}
      POSTGRES_DB: ${POSTGRES_PAYMENTS_DB}
    volumes:
      - payments_data:/var/lib/postgresql/data
    networks:
      - nexus-network

  # Microservicio de Payment
  ms-payment:
    build:
      context: ./ms-nexus-payment
      dockerfile: Dockerfile.dev
      target: development
    environment:
      - NODE_ENV=${NODE_ENV}
      - PORT=${MS_PAYMENT_PORT}
      - NATS_SERVERS=${NATS_SERVERS}
      # PostgreSQL Configuration
      - PAYMENTS_DATABASE_URL=${PAYMENTS_DATABASE_URL}
      - PK_CULQUI=${PK_CULQUI}
      - SK_CULQUI=${SK_CULQUI}
    volumes:
      # Montar código fuente para hot reload
      - ./ms-nexus-payment/src:/app/src:cached
      - ./ms-nexus-payment/package.json:/app/package.json:cached
      - ./ms-nexus-payment/tsconfig.json:/app/tsconfig.json:cached
      - ./ms-nexus-payment/nest-cli.json:/app/nest-cli.json:cached
      # Excluir node_modules para evitar conflictos
      - /app/node_modules
    depends_on:
      - pg-payments
      - nats
    networks:
      - nexus-network
    command: ["pnpm", "run", "start:dev"]
    restart: unless-stopped

  # PostgreSQL - Membership Database
  pg-membership:
    image: postgres:17
    container_name: nexus-membership-db
    restart: always
    ports:
      - "${POSTGRES_MEMBERSHIP_EXTERNAL_PORT:-5435}:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_MEMBERSHIP_USER}
      POSTGRES_PASSWORD: ${POSTGRES_MEMBERSHIP_PASSWORD}
      POSTGRES_DB: ${POSTGRES_MEMBERSHIP_DB}
      POSTGRES_INITDB_ARGS: "--auth-host=md5"
    volumes:
      - membership_data:/var/lib/postgresql/data
    networks:
      - nexus-network

  # Microservicio de Membership
  ms-membership:
    build:
      context: ./ms-nexus-membership
      dockerfile: Dockerfile.dev
      target: development
    environment:
      - NODE_ENV=${NODE_ENV}
      - PORT=${MS_MEMBERSHIP_PORT}
      - NATS_SERVERS=${NATS_SERVERS}
      # PostgreSQL Configuration
      - MEMBERSHIP_DATABASE_URL=${MEMBERSHIP_DATABASE_URL}
    volumes:
      # Montar código fuente para hot reload
      - ./ms-nexus-membership/src:/app/src:cached
      - ./ms-nexus-membership/package.json:/app/package.json:cached
      - ./ms-nexus-membership/tsconfig.json:/app/tsconfig.json:cached
      - ./ms-nexus-membership/nest-cli.json:/app/nest-cli.json:cached
      # Excluir node_modules para evitar conflictos
      - /app/node_modules
    depends_on:
      - nats
      - pg-membership
    networks:
      - nexus-network
    command: ["pnpm", "run", "start:dev"]
    restart: unless-stopped

  # PostgreSQL - Point Database
  pg-point:
    image: postgres:17
    container_name: nexus-point-db
    restart: always
    ports:
      - "${POSTGRES_POINT_EXTERNAL_PORT:-5434}:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_POINT_USER}
      POSTGRES_PASSWORD: ${POSTGRES_POINT_PASSWORD}
      POSTGRES_DB: ${POSTGRES_POINT_DB}
    volumes:
      - point_data:/var/lib/postgresql/data
    networks:
      - nexus-network

  # Microservicio de Point
  ms-point:
    build:
      context: ./ms-nexus-point
      dockerfile: Dockerfile.dev
      target: development
    environment:
      - NODE_ENV=${NODE_ENV}
      - PORT=${MS_POINT_PORT}
      - NATS_SERVERS=${NATS_SERVERS}
      # PostgreSQL Configuration
      - POINT_DATABASE_URL=${POINT_DATABASE_URL}
    volumes:
      # Montar código fuente para hot reload
      - ./ms-nexus-point/src:/app/src:cached
      - ./ms-nexus-point/package.json:/app/package.json:cached
      - ./ms-nexus-point/tsconfig.json:/app/tsconfig.json:cached
      - ./ms-nexus-point/nest-cli.json:/app/nest-cli.json:cached
      # Excluir node_modules para evitar conflictos
      - /app/node_modules
    depends_on:
      - nats
      - pg-point
    networks:
      - nexus-network
    command: ["pnpm", "run", "start:dev"]
    restart: unless-stopped

  pg-unilevel:
    image: postgres:17
    container_name: nexus-unilevel-db
    restart: always
    ports:
      - "${POSTGRES_UNILEVEL_EXTERNAL_PORT:-5436}:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_UNILEVEL_USER}
      POSTGRES_PASSWORD: ${POSTGRES_UNILEVEL_PASSWORD}
      POSTGRES_DB: ${POSTGRES_UNILEVEL_DB}
    volumes:
      - unilevel_data:/var/lib/postgresql/data
    networks:
      - nexus-network

# Volúmenes persistentes
volumes:
  nats_data:
    driver: local
  mongodb_data:
    driver: local
  mongodb_config:
    driver: local
  payments_data:
    driver: local
  membership_data:
    driver: local
  point_data:
    driver: local
  unilevel_data:
    driver: local

# Red de contenedores
networks:
  nexus-network:
    driver: bridge
    name: nexus-microservices
